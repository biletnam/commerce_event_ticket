<?php
/**
 * @file
 * PDF generation functions for the Commerce Event Ticket module.
 */

/**
 * Implements hook_menu().
 */
function commerce_event_ticket_pdf_menu() {
  // The configuration form.
  $items['admin/commerce/config/event-ticket/pdf'] = array(
    'title' => 'PDF settings',
    'description' => 'Configure settings for event ticket PDFs.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_event_ticket_pdf_config'),
    'file' => 'commerce_event_ticket_pdf.admin.inc',
    'access arguments' => array('administer commerce event ticket'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  return $items;
}

/**
 * Define the options for elements to be displayed in the PDF.
 */
function _commerce_event_ticket_pdf_elements_options() {
  return array(
    'logo' => t('Site logo'),
    'barcode_1d_horizontal' => t('1D barcode (horizontal)'),
    'barcode_1d_vertical' => t('1D barcode (vertical)'),
    'barcode_2d' => t('2D barcode (QR code)'),
  );
}

/**
 * Implements hook_commerce_event_tickets_created().
 */
function commerce_event_ticket_pdf_commerce_event_tickets_created($tickets, $order, $recreate, $allow_email) {
  $file = commerce_event_ticket_pdf_create_by_order($order, $tickets, $recreate);
  // Invoke the Rules event "After a PDF ticket file has been created for an order".
  // @see commerce_event_ticket_pdf_rules_event_info()
  if ($file) {
    rules_invoke_all('commerce_event_ticket_pdf_created', $file, $order, $allow_email);
  }
}

/**
 * Implements hook_commerce_order_update().
 */
function commerce_event_ticket_pdf_commerce_order_update($order) {
  // Delete existing ticket PDFs, if the order status has changed, and if the
  // order already has tickets. This ensures that the PDF always reflects the
  // current order status, whenever it is downloaded - without having to
  // recreate the actual ticket barcodes.
  if ($order->status != $order->original->status
    && _commerce_event_ticket_order_should_have_tickets($order)) {
    $ticket_ids = commerce_event_ticket_find_by_order($order);
    if ($ticket_ids) {
      $fids = db_select('commerce_event_ticket_pdf', 'p')
        ->fields('p', array('fid'))
        ->condition('ticket_id', $ticket_ids, 'IN')
        ->execute()
        ->fetchCol();
      if ($fids) {
        file_delete_multiple($fids);
      }
    }
  }
}

/**
 * Create a PDF file for a ticket.
 *
 * @param CommerceEventTicketEntity $ticket
 *   The ticket object.
 * @param bool $recreate
 *   Whether to recreate (replace) the file if it already exists.
 *
 * @return object|FALSE
 *   A saved file object representing the PDF, or FALSE on failure.
 */
function commerce_event_ticket_pdf_create(CommerceEventTicketEntity $ticket, $recreate = FALSE) {
  // Check if the file already exists.
  $fid = db_select('commerce_event_ticket_pdf', 'p')
    ->fields('p', array('fid'))
    ->condition('ticket_id', $ticket->ticket_id)
    ->condition('scope', 'ticket')
    ->execute()
    ->fetchField();
  if ($fid) {
    if ($recreate) {
      file_delete_multiple(array($fid));
    }
    else {
      return file_load($fid);
    }
  }

  // Generate a new PDF file (using the TCPDF library).
  $pdf = commerce_event_ticket_pdf_generate(array($ticket->ticket_id => $ticket));

  // Load the order.
  $order = commerce_order_load($ticket->order_id);

  // Create the filename for the PDF. The MD5 hash is a convenience; this
  // filename does not need to be secure.
  $hash = md5($ticket->order_id . '_' . $ticket->product_id . '_' . $ticket->ticket_id);
  $save_dir = commerce_event_ticket_pdf_get_save_dir($order, TRUE);
  $destination = $save_dir . '/ticket_' . $hash . '.pdf';

  // Save the PDF to a file.
  $data = $pdf->Output('', 'S');
  $file = file_save_data($data, $destination, FILE_EXISTS_REPLACE);

  // Save memory if multiple PDFs are being generated in this process. This
  // may or may not have any real effect, but it does no harm.
  unset($pdf, $data);

  // Fail if the file has not been created.
  if (!$file) {
    watchdog('commerce_event_ticket_pdf', 'Failed to create PDF for ticket @id', array('@id' => $ticket->ticket_id), WATCHDOG_ERROR);
    return FALSE;
  }

  // Ensure that the file UID is the same as the order UID.
  $file->uid = $order->uid;
  file_save($file);

  // Save the file to the ticket.
  db_insert('commerce_event_ticket_pdf')
    ->fields(array(
      'fid' => $file->fid,
      'ticket_id' => $ticket->ticket_id,
      'scope' => 'ticket',
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
    ))
    ->execute();
}

/**
 * Generate a PDF for a ticket.
 *
 * @param array $tickets
 *   An array of ticket objects (CommerceEventTicketEntity), keyed by their
 *   ticket IDs.
 *
 * @return TCPDF
 *   A TCPDF object representing the PDF (not yet saved as a file).
 */
function commerce_event_ticket_pdf_generate(array $tickets) {
  $pdf = _commerce_event_ticket_pdf_get_tcpdf_instance();

  // Turn off the TCPDF header and footer (a black line).
  $pdf->setPrintHeader(FALSE);
  $pdf->setPrintFooter(FALSE);

  $page_margin = 10; // @todo make configurable
  $inner_padding = 10;
  $pdf->SetAutoPageBreak(TRUE, $page_margin);
  $pdf->SetMargins($page_margin, $page_margin);

  // Get an absolute URL to the site's front page.
  $site_url = url('<front>', array('absolute' => TRUE));

  // Set PDF metadata.
  $pdf->setAuthor(variable_get('site_name'));
  $pdf->setCreator($site_url);
  $pdf->setTitle(
    format_plural(count($tickets), 'Ticket: @ids', 'Tickets: @ids', array('@ids' => implode(', ', array_keys($tickets))))
  );

  // Get the configuration for elements in the PDF.
  $options = _commerce_event_ticket_pdf_elements_options();
  $defaults = drupal_map_assoc(array_keys($options));
  $elements = variable_get('commerce_event_ticket_pdf_elements', $defaults);

  foreach ($tickets as $ticket) {
    // Create a new PDF page.
    $pdf->addPage('P', 'A4');
    // Get the page height and width for later calculations.
    $page_height = $pdf->getPageHeight();
    $page_width = $pdf->getPageWidth();

    // Add a 1D code at the top right of the page (optionally).
    $barcode_1d_width = 80;
    $barcode_1d_height = 15;
    $barcode_1d_hz_top = $page_margin;
    $barcode_1d_hz_bottom = 0;
    $barcode_format = 'C128'; // @todo make configurable
    if (!empty($elements['barcode_1d_horizontal'])) {
      $barcode_1d_hz_bottom = $barcode_1d_hz_top + $barcode_1d_height;
      $pdf->write1DBarcode(
        $ticket->barcode_token,
        $barcode_format,
        $page_width - $barcode_1d_width - $page_margin,
        $barcode_1d_hz_top,
        $barcode_1d_width,
        $barcode_1d_height,
        NULL,
        array('stretch' => TRUE)
      );
    }

    // Add the site logo just under the barcode (optionally).
    $logo_width = 30;
    $logo_height = 0;
    $logo_bottom = 0;
    if (!empty($elements['logo'])) {
      $logo_url = theme_get_setting('logo');
      if ($logo_url) {
        $logo_path = drupal_realpath(ltrim(parse_url($logo_url, PHP_URL_PATH), '/'));
        $logo_x = $page_width - $logo_width - $page_margin;
        $logo_y = $barcode_1d_hz_bottom + $inner_padding;
        if ($logo_path && is_readable($logo_path)) {
          $logo_size = getimagesize($logo_path);
          $logo_height = $logo_size[1] / ($logo_size[0] / $logo_width);
          $logo_bottom = $logo_y + $logo_height;
          $pdf->Image($logo_path, $logo_x, $logo_y, $logo_width, $logo_height, NULL, $site_url);
        }
      }
    }

    // Add a vertical, version of the same 1D code (optionally), half-way down
    // the left-hand side of the page.
    if (!empty($elements['barcode_1d_vertical'])) {
      // Rotate the page by -90 degrees, around its top-left corner.
      $pdf->setXY(0, 0);
      $pdf->startTransform();
      $pdf->Rotate(-90);
      $pdf->setXY(0, 0);
      $barcode_1d_vt_x = $page_height / 2 - $barcode_1d_width / 2;
      $barcode_1d_vt_y = $page_margin - $page_width;
      $pdf->write1DBarcode(
        $ticket->barcode_token,
        $barcode_format,
        $barcode_1d_vt_x,
        $barcode_1d_vt_y,
        $barcode_1d_width,
        $barcode_1d_height,
        NULL,
        array('stretch' => TRUE)
      );
      $pdf->stopTransform();
      // Add a region that stops text overwriting the vertical barcode.
      $pdf->addPageRegion(array(
        'xt' => $page_width - $page_margin - $barcode_1d_height - $inner_padding,
        'xb' => $page_width - $page_margin,
        'yt' => $barcode_1d_vt_x,
        'yb' => $barcode_1d_vt_x + $barcode_1d_width,
        'side' => 'R',
      ));
    }

    // Add a QR code in the top left of the page (optionally).
    $barcode_2d_width = 0;
    $barcode_2d_height = 0;
    if (!empty($elements['barcode_2d'])) {
      $barcode_2d_width = 40;
      $barcode_2d_height = 40;
      $pdf->write2DBarcode($ticket->barcode_token, 'QRCODE', $page_margin, $page_margin, $barcode_2d_width, $barcode_2d_height);
    }

    // Set our position to be just after the barcodes.
    $pdf->setX($page_margin);
    $pdf->setY(($barcode_2d_height ? $barcode_2d_height + $inner_padding : 0) + $page_margin);

    // After writing the optional 'elements', allow other modules to alter the PDF
    // object.
    drupal_alter('commerce_event_ticket_pdf_after_elements', $pdf, $ticket);

    // Generate HTML ticket information and write it to the page. Other modules
    // can change this information by overriding
    // theme_commerce_event_ticket_pdf_info().
    $ticket_info = theme('commerce_event_ticket_pdf_info', array(
      'ticket' => $ticket,
    ));
    $pdf->SetFont('Helvetica', NULL, 12);
    $pdf->writeHTML($ticket_info);

    // After the PDF after writing everything else.
    drupal_alter('commerce_event_ticket_pdf', $pdf, $ticket);
  }

  return $pdf;
}

/**
 * Implements hook_theme().
 */
function commerce_event_ticket_pdf_theme() {
  return array(
    'commerce_event_ticket_pdf_info' => array(
      'variables' => array(
        'ticket' => NULL,
      ),
    ),
  );
}

/**
 * Preprocess function for theming the ticket information on an event ticket.
 */
function template_preprocess_commerce_event_ticket_pdf_info(&$variables) {
  $ticket = $variables['ticket'];

  $order = commerce_order_load($ticket->order_id);
  $product = commerce_product_load($ticket->product_id);
  $owner = user_load($order->uid);

  $variables['product_title'] = $product->title;

  $variables['data'] = array(
    t('Order number') => $order->order_number,
    t('Order created') => format_date($order->created),
    t('Order updated') => format_date($order->changed),
    t('Customer') => format_username($owner),
    t('Ticket ID') => $ticket->ticket_id,
    t('Date generated') => format_date(REQUEST_TIME),
    t('Current order status') => commerce_order_status_get_title($order->status),
  );
}

/**
 * Theme the ticket information on an event ticket.
 */
function theme_commerce_event_ticket_pdf_info($variables) {
  $output = array();
  $output['title'] = array(
    '#prefix' => '<h1>',
    '#suffix' => '</h1>',
    '#markup' => t('Product: !title', array('!title' => $variables['product_title'])),
  );
  $output['subtitle'] = array(
    '#prefix' => '<h2>',
    '#suffix' => '</h2>',
    '#markup' => t('Ticket information'),
  );
  $rows = array();
  foreach ($variables['data'] as $label => $value) {
    $rows[] = array('<strong>' . $label . '</strong>', $value);
  }
  $output['table'] = array(
    '#theme' => 'table',
    '#header' => array(),
    '#rows' => $rows,
    '#attributes' => array(
      'cellpadding' => '10',
    ),
  );
  return drupal_render($output);
}

/**
 * Get the directory for saving PDFs.
 */
function commerce_event_ticket_pdf_get_save_dir($order, $create = FALSE) {
  // Use a directory structure that includes the date of the order - otherwise
  // we might be creating 1000s of files in the same directory which may
  // introduce performance issues.
  $save_dir = 'private://commerce_event_ticket/pdf/' . date('Y/m', $order->created);
  if ($create && !file_exists($save_dir)) {
    mkdir($save_dir, 0775, TRUE);
    chmod(drupal_realpath($save_dir), 0775);
  }
  return $save_dir;
}

/**
 * Get a TCPDF instance.
 *
 * @return TCPDF
 *   A TCPDF object.
 */
function _commerce_event_ticket_pdf_get_tcpdf_instance() {
  $config = array(
    'filetype' => 'inc',
    'filename' => 'commerce_event_ticket_pdf.config',
    'module' => 'commerce_event_ticket_pdf',
  );
  return tcpdf_get_instance(array(), array(), $config);
}

/**
 * Implements hook_entity_delete()
 */
function commerce_event_ticket_pdf_entity_delete($entity, $type) {
  // Delete PDF files when tickets are deleted.
  if ($type == 'commerce_event_ticket') {
    $fids = db_select('commerce_event_ticket_pdf', 'p')
      ->fields('p', array('fid'))
      ->condition('ticket_id', $entity->ticket_id)
      ->execute()
      ->fetchCol();
    if ($fids) {
      file_delete_multiple($fids);
    }
  }
}

/**
 * Implements hook_file_delete().
 */
function commerce_event_ticket_pdf_file_delete($file) {
  if ($file->type == 'application/pdf') {
    // Update the table tracking PDF files, when the files are deleted.
    db_delete('commerce_event_ticket_pdf')
      ->condition('fid', $file->fid)
      ->execute();
  }
}

/**
 * Create a PDF file containing all the tickets for an order.
 *
 * @param object $order
 *   The Commerce order object.
 * @param array $tickets
 *   An array of ticket objects. If omitted, the tickets for the order will be
 *   loaded automatically.
 * @param bool $recreate
 *   Whether to recreate (replace) the file if it already exists.
 *
 * @return object|FALSE
 *   A saved file object representing the PDF, or FALSE on failure.
 */
function commerce_event_ticket_pdf_create_by_order($order, $tickets = array(), $recreate = FALSE) {
  if (empty($tickets)) {
    $ticket_ids = commerce_event_ticket_find_by_order($order);
    if (!count($ticket_ids)) {
      return;
    }
    $tickets = commerce_event_ticket_load_multiple($ticket_ids);
  }
  // Check if the file already exists.
  $fid = db_select('commerce_event_ticket_pdf', 'p')
    ->fields('p', array('fid'))
    ->condition('ticket_id', array_keys($tickets), 'IN')
    ->condition('scope', 'order')
    ->range(0, 1)
    ->execute()
    ->fetchField();
  if ($fid) {
    if ($recreate) {
      file_delete_multiple(array($fid));
    }
    else {
      return file_load($fid);
    }
  }

  $pdf = commerce_event_ticket_pdf_generate($tickets);

  // Save the PDF to a file.
  $save_dir = commerce_event_ticket_pdf_get_save_dir($order, TRUE);
  $output_filename = $save_dir . '/' . 'tickets-order-' . $order->order_id . '.pdf';
  $data = $pdf->Output('', 'S');
  $file = file_save_data($data, $output_filename, FILE_EXISTS_REPLACE);
  unset($pdf, $data);

  if (!$file) {
    watchdog('commerce_event_ticket_pdf', 'Failed to create PDF for order @id', array('@id' => $order->order_id), WATCHDOG_ERROR);
    return FALSE;
  }

  // Ensure that the file's UID is the same as the order UID.
  $file->uid = $order->uid;
  file_save($file);

  // Record that this file is associated with these tickets, so it can be
  // deleted if any of the tickets are deleted.
  $query = db_insert('commerce_event_ticket_pdf')
    ->fields(array('fid', 'ticket_id', 'created', 'changed', 'scope'));
  foreach ($tickets as $ticket) {
    $query->values(array(
      'fid' => $file->fid,
      'ticket_id' => $ticket->ticket_id,
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
      'scope' => 'order',
    ));
  }
  $query->execute();

  file_usage_add($file, 'commerce_event_ticket_pdf', 'commerce_order', $order->order_id);
  return $file;
}

/**
 * Implements hook_file_download_access().
 *
 * If the user can view the ticket, they should be allowed to view any attached
 * files.
 */
function commerce_event_ticket_pdf_file_download_access($file_item, $entity_type, $entity) {
  if ($entity_type == 'commerce_event_ticket') {
    return commerce_event_ticket_access('view', $entity);
  }
}

/**
 * Implements hook_file_entity_access().
 *
 * This is the equivalent of commerce_event_ticket_file_download_access() for
 * files that are stored as File Entity entities.
 */
function commerce_event_ticket_pdf_file_entity_access($op, $file, $account) {
  if (($op == 'view' || $op == 'download') && is_object($file)) {
    $references = file_get_file_references($file);
    foreach ($references as $result) {
      if (isset($result['commerce_event_ticket'])) {
        foreach (array_keys($result['commerce_event_ticket']) as $ticket_id) {
          $ticket = commerce_event_ticket_load($ticket_id);
          if ($ticket && commerce_event_ticket_access('view', $ticket, $account)) {
            return FILE_ENTITY_ACCESS_ALLOW;
          }
        }
      }
      return FILE_ENTITY_ACCESS_IGNORE;
    }
  }
  return FILE_ENTITY_ACCESS_IGNORE;
}
