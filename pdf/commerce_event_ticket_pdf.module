<?php
/**
 * @file
 * PDF generation functions for the Commerce Event Ticket module.
 */

/**
 * Implements hook_entity_presave().
 */
function commerce_event_ticket_pdf_entity_insert($entity, $type) {
  // Generate and save a PDF file when the ticket entity is updated.
  if ($type == 'commerce_event_ticket') {
    commerce_event_ticket_pdf_create($entity);
  }
}

/**
 * Create a PDF file for a ticket.
 *
 * @param CommerceEventTicketEntity $ticket
 *   The ticket object.
 * @param bool $recreate
 *   Whether to recreate (replace) the file if it already exists.
 *
 * @return stdClass|FALSE
 *   A Drupal managed file object, already saved, or FALSE on failure.
 */
function commerce_event_ticket_pdf_create(CommerceEventTicketEntity $ticket, $recreate = FALSE) {
  // Use an Entity API metadata wrapper for simpler access to the file field.
  $ticket_wrapper = entity_metadata_wrapper('commerce_event_ticket', $ticket);
  // If the file already exists then just return that.
  if (!empty($ticket->cet_pdf) && !$recreate) {
    return $ticket_wrapper->cet_pdf->value();
  }
  // Generate a new PDF file (using the TCPDF library).
  $pdf = commerce_event_ticket_pdf_generate($ticket);
  if (!$pdf) {
    watchdog('commerce_event_ticket', 'Could not generate PDF file for ticket @ticket', array('@ticket' => $ticket->ticket_id), WATCHDOG_ERROR);
  }
  // Get the PDF data as a string.
  $pdf_data = $pdf->Output('', 'S');
  // Create the directory for saving PDFs, if necessary.
  $save_dir = 'private://commerce_event_ticket_pdf';
  if (!file_exists($save_dir)) {
    mkdir($save_dir, 0775, TRUE);
    chmod(drupal_realpath($save_dir), 0775);
  }
  // Create the filename for the PDF. The MD5 hash is a convenience; this
  // filename does not need to be secure.
  $hash = md5($ticket->order_id . '_' . $ticket->product_id . '_' . $ticket->ticket_id);
  $destination = $save_dir . '/ticket_' . $hash . '.pdf';
  $file = file_save_data($pdf_data, $destination, FILE_EXISTS_REPLACE);
  if ($file) {
    // Ensure that the file UID is the same as the order UID.
    // @todo can this commerce_order_load() be done through the wrapper? or is
    // there any way to save the file with the correct UID already set?
    $order = commerce_order_load($ticket->order_id);
    $file->uid = $order->uid;
    file_save($file);
    // Save the file to the ticket.
    $ticket_wrapper->cet_pdf->set(array(
      'fid' => $file->fid,
      'display' => 0,
    ));
    $ticket_wrapper->save();
  }
  return $file;
}

/**
 * Generate a PDF for a ticket.
 *
 * @param CommerceEventTicketEntity $ticket
 *   The ticket object.
 *
 * @return TCPDF|FALSE
 *   A TCPDF object, or FALSE on failure.
 */
function commerce_event_ticket_pdf_generate(CommerceEventTicketEntity $ticket) {
  $pdf = _commerce_event_ticket_pdf_get_tcpdf_instance();
  if (!$pdf) {
    watchdog('commerce_event_ticket', 'Failed to get TCPDF instance', NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  // Turn off the TCPDF header and footer (a black line).
  $pdf->setPrintHeader(FALSE);
  $pdf->setPrintFooter(FALSE);

  // Get an absolute URL to the site's front page.
  $site_url = url('<front>', array('absolute' => TRUE));

  // Set the author and creator metadata.
  $pdf->setAuthor(variable_get('site_name'));
  $pdf->setCreator($site_url);

  // Create a new PDF page.
  $pdf->addPage('P', 'A4');
  // Get the page width for later calculations.
  $page_width = $pdf->getPageWidth();

  // Add the site logo at the top right of the page.
  $logo_width = 30;
  $logo_height = 0;
  $logo_url = theme_get_setting('logo');
  if ($logo_url) {
    $logo_path = drupal_realpath(ltrim(parse_url($logo_url, PHP_URL_PATH), '/'));
    if ($logo_path && is_readable($logo_path)) {
      $logo_size = getimagesize($logo_path);
      $logo_width = 30;
      $logo_height = $logo_size[1] / ($logo_size[0] / 30);
      $pdf->Image($logo_path, $page_width - $logo_width - 10, 10, $logo_width, $logo_height, NULL, $site_url);
    }
  }

  // Add a 1D code just under the logo.
  $barcode_1d_width = 80;
  $barcode_1d_height = 15;
  $barcode_1d_bottom = $logo_height + 20 + $barcode_1d_height;
  $barcode_format = is_numeric($ticket->barcode_token) ? 'EAN13' : 'C128';
  $pdf->write1DBarcode(
    $ticket->barcode_token,
    $barcode_format,
    $page_width - $barcode_1d_width - 10,
    $logo_height + 20,
    $barcode_1d_width,
    $barcode_1d_height,
    NULL,
    array('stretch' => TRUE)
  );

  // Add a QR code in the top left of the page.
  $barcode_2d_width = 40;
  $barcode_2d_height = 40;
  $pdf->write2DBarcode($ticket->barcode_token, 'QRCODE', 10, 10, $barcode_2d_width, $barcode_2d_height);

  // Build a table of ticket information.
  $order = commerce_order_load($ticket->order_id);
  $owner = user_load($order->uid);
  $product = commerce_product_load($ticket->product_id);
  $table = theme('table', array(
    'header' => array(),
    'rows' => array(
      array('<b>' . t('Order number:') . '</b>', '<b>' . $order->order_number . '</b>'),
      array('<b>' . t('Order created:') . '</b>', format_date($order->created)),
      array('<b>' . t('Order updated:') . '</b>', format_date($order->changed)),
      array('<b>' . t('Customer:') . '</b>', format_username($owner)),
      array('<b>' . t('Ticket ID:') . '</b>', $ticket->ticket_id),
      array('<b>' . t('Date generated:') . '</b>', format_date(REQUEST_TIME)),
      array('<b>' . t('Current order status:') . '</b>', commerce_order_status_get_title($order->status)),
    ),
    'attributes' => array(
      'cellpadding' => '10',
    ),
  ));

  // Write the table starting under a heading "Ticket information".
  $pdf->setY($barcode_1d_bottom + 10);
  $pdf->SetFont('Helvetica', NULL, 24);
  $pdf->Write(20, $product->title . "\n", NULL, NULL, 'C');
  $pdf->setX(10);
  $pdf->SetFont('Helvetica', NULL, 18);
  $pdf->Write(20, t('Ticket information') . "\n");
  $pdf->SetFont('Helvetica', NULL, 12);
  $pdf->writeHTML($table);

  return $pdf;
}

/**
 * Get a TCPDF instance.
 *
 * @return TCPDF
 *   A TCPDF object.
 */
function _commerce_event_ticket_pdf_get_tcpdf_instance() {
  $config = array(
    'filetype' => 'inc',
    'filename' => 'commerce_event_ticket_pdf.config',
    'module' => 'commerce_event_ticket_pdf',
  );
  return tcpdf_get_instance(array(), array(), $config);
}
