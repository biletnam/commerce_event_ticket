<?php
/**
 * @file
 * PDF generation functions for the Commerce Event Ticket module.
 */

/**
 * Implements hook_menu().
 */
function commerce_event_ticket_pdf_menu() {
  // The configuration form.
  $items['admin/commerce/config/event-ticket/pdf'] = array(
    'title' => 'PDF settings',
    'description' => 'Configure settings for event ticket PDFs.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_event_ticket_pdf_config'),
    'file' => 'commerce_event_ticket_pdf.admin.inc',
    'access arguments' => array('administer commerce event ticket'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  return $items;
}

/**
 * Define the options for elements to be displayed in the PDF.
 */
function _commerce_event_ticket_pdf_elements_options() {
  return array(
    'logo' => t('Site logo'),
    'barcode_1d_horizontal' => t('1D barcode (horizontal)'),
    'barcode_1d_vertical' => t('1D barcode (vertical)'),
    'barcode_2d' => t('2D barcode (QR code)'),
  );
}

/**
 * Implements hook_entity_insert().
 */
function commerce_event_ticket_pdf_entity_insert($entity, $type) {
  // Generate and save a PDF file when the ticket entity is first created.
  if ($type == 'commerce_event_ticket') {
    commerce_event_ticket_pdf_create($entity);
  }
}

/**
 * Implements hook_commerce_order_update().
 */
function commerce_event_ticket_pdf_commerce_order_update($order) {
  // Force the re-creation of ticket PDFs, if the order status has changed, and
  // if the order already has tickets. This ensures that the PDF always reflects
  // the current order status, whenever it is downloaded - without having to
  // recreate the actual ticket barcodes.
  if ($order->status != $order->original->status
    && _commerce_event_ticket_order_should_have_tickets($order)) {
    // Find the tickets for the order.
    $ticket_ids = commerce_event_ticket_find_by_order($order);
    if ($ticket_ids) {
      $tickets = commerce_event_ticket_load_multiple($ticket_ids);
      foreach ($tickets as $ticket) {
        commerce_event_ticket_pdf_create($ticket, TRUE);
      }
    }
  }
}

/**
 * Create a PDF file for a ticket.
 *
 * @param CommerceEventTicketEntity $ticket
 *   The ticket object.
 * @param bool $recreate
 *   Whether to recreate (replace) the file if it already exists.
 *
 * @return stdClass|FALSE
 *   A Drupal managed file object, already saved, or FALSE on failure.
 */
function commerce_event_ticket_pdf_create(CommerceEventTicketEntity $ticket, $recreate = FALSE) {
  // Use an Entity API metadata wrapper for simpler access to the file field.
  $ticket_wrapper = entity_metadata_wrapper('commerce_event_ticket', $ticket);
  // If the file already exists then just return that.
  if (!empty($ticket->cet_pdf) && !$recreate) {
    return $ticket_wrapper->cet_pdf->value();
  }

  // Generate a new PDF file (using the TCPDF library).
  $pdf = commerce_event_ticket_pdf_generate($ticket);
  if (!$pdf) {
    watchdog('commerce_event_ticket', 'Could not generate PDF file for ticket @ticket', array('@ticket' => $ticket->ticket_id), WATCHDOG_ERROR);
  }

  // Load the order.
  $order = commerce_order_load($ticket->order_id);

  // Create the directory for saving this PDF, if necessary. Use a directory
  // structure that includes the date of the order - otherwise we might be
  // creating 1000s of files in the same directory which may introduce
  // performance issues.
  $save_dir = 'private://commerce_event_ticket_pdf/' . date('Y/m/d', $order->created);
  if (!file_exists($save_dir)) {
    mkdir($save_dir, 0755, TRUE);
    chmod(drupal_realpath($save_dir), 0755);
  }

  // Create the filename for the PDF. The MD5 hash is a convenience; this
  // filename does not need to be secure.
  $hash = md5($ticket->order_id . '_' . $ticket->product_id . '_' . $ticket->ticket_id);
  $destination = $save_dir . '/ticket_' . $hash . '.pdf';

  // Get the PDF data as a string.
  $pdf_data = $pdf->Output('', 'S');

  // Save the PDF to a file.
  $file = file_save_data($pdf_data, $destination, FILE_EXISTS_REPLACE);

  // Save memory if multiple PDFs are being generated in this process. This
  // may or may not have any real effect, but it does no harm.
  unset($pdf, $pdf_data);

  // Link the file to the ticket entity.
  if ($file) {
    // Ensure that the file UID is the same as the order UID.
    $file->uid = $order->uid;
    file_save($file);
    // Save the file to the ticket.
    $ticket_wrapper->cet_pdf->set(array(
      'fid' => $file->fid,
      'display' => 0,
    ));
    $ticket_wrapper->save();
  }
  return $file;
}

/**
 * Generate a PDF for a ticket.
 *
 * @param CommerceEventTicketEntity $ticket
 *   The ticket object.
 *
 * @return TCPDF|FALSE
 *   A TCPDF object, or FALSE on failure.
 */
function commerce_event_ticket_pdf_generate(CommerceEventTicketEntity $ticket) {
  $pdf = _commerce_event_ticket_pdf_get_tcpdf_instance();
  if (!$pdf) {
    watchdog('commerce_event_ticket', 'Failed to get TCPDF instance', NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  // Turn off the TCPDF header and footer (a black line).
  $pdf->setPrintHeader(FALSE);
  $pdf->setPrintFooter(FALSE);

  $page_margin = 10; // @todo make configurable
  $inner_padding = 10;
  $pdf->SetAutoPageBreak(TRUE, $page_margin);
  $pdf->SetMargins($page_margin, $page_margin);

  // Add PDF protection: disallow all operations except 'print' and
  // 'print-high'. This depends on PDF reader applications actually respecting
  // this restriction; many don't. But this does no harm.
  $block_operations = array(
    'modify',
    'copy',
    'annot-forms',
    'fill-forms',
    'extract',
    'assemble',
  );
  $password = user_password();
  // Use AES 256-bit encryption if the mcrypt extension is installed; otherwise,
  // fall back to RC4 128-bit.
  $mode = extension_loaded('mcrypt') ? 3 : 1;
  $pdf->SetProtection($block_operations, NULL, $password, $mode);

  // Get an absolute URL to the site's front page.
  $site_url = url('<front>', array('absolute' => TRUE));

  // Set PDF metadata.
  $pdf->setAuthor(variable_get('site_name'));
  $pdf->setCreator($site_url);
  $pdf->SetTitle(t('Ticket: !id', array('!id' => $ticket->ticket_id)));
  $pdf->SetSubject(t('Event ticket'));

  // Create a new PDF page.
  $pdf->addPage('P', 'A4');
  // Get the page height and width for later calculations.
  $page_height = $pdf->getPageHeight();
  $page_width = $pdf->getPageWidth();

  // Get the configuration for elements in the PDF.
  $options = _commerce_event_ticket_pdf_elements_options();
  $defaults = drupal_map_assoc(array_keys($options));
  $elements = variable_get('commerce_event_ticket_pdf_elements', $defaults);

  // Add the site logo at the top right of the page (optionally).
  $logo_width = 30;
  $logo_height = 0;
  if (!empty($elements['logo'])) {
    $logo_url = theme_get_setting('logo');
    if ($logo_url) {
      $logo_path = drupal_realpath(ltrim(parse_url($logo_url, PHP_URL_PATH), '/'));
      if ($logo_path && is_readable($logo_path)) {
        $logo_size = getimagesize($logo_path);
        $logo_height = $logo_size[1] / ($logo_size[0] / $logo_width);
        $pdf->Image($logo_path, $page_width - $logo_width - $page_margin, $page_margin, $logo_width, $logo_height, NULL, $site_url);
      }
    }
  }

  // Add a 1D code just under the logo (optionally).
  $barcode_1d_width = 80;
  $barcode_1d_height = 15;
  $barcode_1d_hz_top = $logo_height ? $logo_height + $page_margin + $inner_padding : $page_margin;
  $barcode_1d_hz_bottom = 0;
  $barcode_format = 'C128'; // @todo make configurable
  if (!empty($elements['barcode_1d_horizontal'])) {
    $barcode_1d_hz_bottom = $barcode_1d_hz_top + $barcode_1d_height;
    $pdf->write1DBarcode(
      $ticket->barcode_token,
      $barcode_format,
      $page_width - $barcode_1d_width - $page_margin,
      $barcode_1d_hz_top,
      $barcode_1d_width,
      $barcode_1d_height,
      NULL,
      array('stretch' => TRUE)
    );
  }

  // Add a vertical, version of the same 1D code (optionally).
  if (!empty($elements['barcode_1d_vertical'])) {
    // Rotate the page by -90 degrees, around its top-left corner.
    $pdf->setXY(0, 0);
    $pdf->startTransform();
    $pdf->Rotate(-90);
    $pdf->setXY(0, 0);
    $x = $barcode_1d_hz_bottom + $inner_padding;
    $y = $page_margin - $page_width;
    $pdf->write1DBarcode(
      $ticket->barcode_token,
      $barcode_format,
      $x,
      $y,
      $barcode_1d_width,
      $barcode_1d_height,
      NULL,
      array('stretch' => TRUE)
    );
    $pdf->stopTransform();
    // Add a region that stops text overwriting the vertical barcode.
    $pdf->addPageRegion(array(
      'xt' => $page_width - $page_margin,
      'xb' => $page_width - $page_margin - $barcode_1d_height - $inner_padding,
      'yt' => $barcode_1d_hz_bottom,
      'yb' => $barcode_1d_hz_bottom + $inner_padding + $barcode_1d_width,
      'side' => 'R',
    ));
  }

  // Add a QR code in the top left of the page (optionally).
  $barcode_2d_width = 0;
  $barcode_2d_height = 0;
  if (!empty($elements['barcode_2d'])) {
    $barcode_2d_width = 40;
    $barcode_2d_height = 40;
    $pdf->write2DBarcode($ticket->barcode_token, 'QRCODE', $page_margin, $page_margin, $barcode_2d_width, $barcode_2d_height);
  }

  // Set our position to be just after the barcodes.
  $pdf->setX($page_margin);
  $pdf->setY(($barcode_2d_height ? $barcode_2d_height + $inner_padding : 0) + $page_margin);

  // After writing the optional 'elements', allow other modules to alter the PDF
  // object.
  drupal_alter('commerce_event_ticket_pdf_after_elements', $pdf, $ticket);

  // Generate HTML ticket information and write it to the page. Other modules
  // can change this information by overriding
  // theme_commerce_event_ticket_pdf_info().
  $ticket_info = theme('commerce_event_ticket_pdf_info', array(
    'ticket' => $ticket,
  ));
  $pdf->SetFont('Helvetica', NULL, 12);
  $pdf->writeHTML($ticket_info);

  // After the PDF after writing everything else.
  drupal_alter('commerce_event_ticket_pdf', $pdf, $ticket);

  return $pdf;
}

/**
 * Implements hook_theme().
 */
function commerce_event_ticket_pdf_theme() {
  return array(
    'commerce_event_ticket_pdf_info' => array(
      'variables' => array(
        'ticket' => NULL,
      ),
    ),
  );
}

/**
 * Preprocess function for theming the ticket information on an event ticket.
 */
function template_preprocess_commerce_event_ticket_pdf_info(&$variables) {
  $ticket = $variables['ticket'];

  $order = commerce_order_load($ticket->order_id);
  $product = commerce_product_load($ticket->product_id);
  $owner = user_load($order->uid);

  $variables['product_title'] = $product->title;

  $variables['data'] = array(
    t('Order number') => $order->order_number,
    t('Order created') => format_date($order->created),
    t('Order updated') => format_date($order->changed),
    t('Customer') => format_username($owner),
    t('Ticket ID') => $ticket->ticket_id,
    t('Date generated') => format_date(REQUEST_TIME),
    t('Current order status') => commerce_order_status_get_title($order->status),
  );
}

/**
 * Theme the ticket information on an event ticket.
 */
function theme_commerce_event_ticket_pdf_info($variables) {
  $output = array();
  $output['title'] = array(
    '#prefix' => '<h1>',
    '#suffix' => '</h1>',
    '#markup' => t('Product: !title', array('!title' => $variables['product_title'])),
  );
  $output['subtitle'] = array(
    '#prefix' => '<h2>',
    '#suffix' => '</h2>',
    '#markup' => t('Ticket information'),
  );
  $rows = array();
  foreach ($variables['data'] as $label => $value) {
    $rows[] = array('<strong>' . $label . '</strong>', $value);
  }
  $output['table'] = array(
    '#theme' => 'table',
    '#header' => array(),
    '#rows' => $rows,
    '#attributes' => array(
      'cellpadding' => '10',
    ),
  );
  return drupal_render($output);
}

/**
 * Get a TCPDF instance.
 *
 * @return TCPDF
 *   A TCPDF object.
 */
function _commerce_event_ticket_pdf_get_tcpdf_instance() {
  $config = array(
    'filetype' => 'inc',
    'filename' => 'commerce_event_ticket_pdf.config',
    'module' => 'commerce_event_ticket_pdf',
  );
  return tcpdf_get_instance(array(), array(), $config);
}
