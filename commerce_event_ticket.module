<?php
/**
 * @file
 * Main file for the Commerce Event Ticket module.
 */

/**
 * Implements hook_entity_info().
 */
function commerce_event_ticket_entity_info() {
  $entities = array();

  $entities['commerce_event_ticket'] = array(
    'label' => t('Ticket'),
    'entity class' => 'CommerceEventTicketEntity',
    'controller class' => 'EntityAPIController',
    'uri callback' => 'commerce_event_ticket_uri',
    'access callback' => 'commerce_event_ticket_access',
    'label callback' => 'commerce_event_ticket_label',
    'base table' => 'commerce_event_ticket',
    'token type' => 'commerce-event-ticket',
    'entity keys' => array(
      'id' => 'ticket_id',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
      ),
      'teaser' => array(
        'label' => t('Teaser'),
      ),
    ),
    'view callback' => 'entity_metadata_view_single',
    'static cache' => TRUE,
    'fieldable' => FALSE,
    'module' => 'commerce_event_ticket',
  );

  foreach (commerce_event_ticket_types() as $key => $type) {
    $entities['commerce_event_ticket']['bundles'][$key] = array(
      'label' => $type['name'],
      'admin' => array(
        'path' => 'admin/commerce/config/event-ticket/' . $key,
        'real path' => 'admin/commerce/config/event-ticket/' . $key,
        'bundle argument' => 4,
        'access arguments' => array('administer commerce event ticket'),
      ),
    );
  }

  return $entities;
}

/**
 * Implements hook_permission().
 */
function commerce_event_ticket_permission() {
  return array(
    'administer commerce event ticket' => array(
      'title' => t('Administer event tickets'),
    ),
    'view all commerce event ticket' => array(
      'title' => t('View all event tickets'),
    ),
    'view own commerce event ticket' => array(
      'title' => t('View own event tickets'),
    ),
  );
}

/**
 * Implements hook_entity_property_info().
 */
function commerce_event_ticket_entity_property_info() {
  $info = array();
  $properties = &$info['commerce_event_ticket']['properties'];
  $properties = array(
    'ticket_id' => array(
      'label' => t('Ticket ID'),
      'description' => t('Primary key'),
      'type' => 'integer',
      'schema field' => 'id',
      'required' => TRUE,
    ),
    'type' => array(
      'label' => t('Type'),
      'description' => t('The type of ticket.'),
      'type' => 'text',
      'schema field' => 'type',
      'required' => TRUE,
    ),
    'barcode' => array(
      'label' => t('Barcode'),
      'description' => t('The barcode for the ticket.'),
      'type' => 'int',
      'schema field' => 'barcode',
      'required' => TRUE,
    ),
    'owner' => array(
      'label' => t('Owner'),
      'description' => t('The owner of the ticket.'),
      'type' => 'user',
      'schema field' => 'uid',
      'required' => TRUE,
    ),
    'order' => array(
      'label' => t('Order'),
      'description' => t('The Commerce order associated with the ticket.'),
      'type' => 'commerce_order',
      'schema field' => 'order_id',
      'required' => TRUE,
    ),
    'line_item' => array(
      'label' => t('Line item'),
      'description' => t('The Commerce line item associated with the ticket.'),
      'type' => 'commerce_line_item',
      'schema field' => 'line_item_id',
      'required' => TRUE,
    ),
    'product' => array(
      'label' => t('Product'),
      'description' => t('The Commerce product associated with the ticket.'),
      'type' => 'commerce_product',
      'schema field' => 'product_id',
      'required' => TRUE,
    ),
  );
  return $info;
}

/**
 * Get information about Commerce Event Ticket types.
 *
 * @return array
 *   An array of ticket types, keyed with a unique machine name. Each element is
 *   a structured array, defining at least 'name' (a sanitized human-readable
 *   name).
 */
function commerce_event_ticket_types() {
  $types = &drupal_static(__FUNCTION__);
  if ($types === NULL) {
    $types = array(
      'ticket' => array(
        'name' => t('Event ticket'),
      ),
    );
    $types += module_invoke_all('commerce_event_ticket_info');
    drupal_alter('commerce_event_ticket_info', $types);
  }
  return $types;
}

/**
 * Access callback for Commerce Event Ticket.
 */
function commerce_event_ticket_access($op, $entity, $account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }
  if ($op == 'view') {
    if (!empty($account->uid) && $account->uid == $entity->uid && user_access('view own commerce event ticket')) {
      return TRUE;
    }
    if (user_access('view all commerce event ticket')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Label callback for Commerce Event Ticket.
 */
function commerce_event_ticket_label($entity) {
  $product = commerce_product_load($entity->product_id);
  return t('Ticket: @product', array('@product' => $product->title));
}

/**
 * Create event tickets for an order.
 *
 * @todo
 */
function commerce_event_ticket_create_from_order($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  // Find line items in the order.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if ($line_item_wrapper->type->value() == 'product') {
      // Get the product from the line item.
      $product = $line_item_wrapper->commerce_product->value();
      $config = commerce_event_ticket_get_ticket_config($product);
      if ($config) {
        $ticket = entity_get_controller('commerce_event_ticket')->create(array(
          'type' => $config['type'],
          'product_id' => $product->product_id,
          'order_id' => $order->order_id,
          'uid' => $order->uid,
          'line_item_id' => $line_item_wrapper->line_item_id->value(),
        ));
        // @todo generate barcode
        entity_get_controller('commerce_event_ticket')->save($ticket);
      }
    }
  }
}

/**
 * URI callback for Commerce Event Ticket.
 */
function commerce_event_ticket_uri($entity) {
  return 'user/' . $entity->uid . '/orders/' . $entity->order_id . '/tickets/' . $entity->ticket_id;
}

/**
 * Get the event ticket configuration for a product.
 *
 * @todo
 *
 * @param stdClass $product
 *   The Commerce product object.
 *
 * @return array
 *   Event ticket configuration.
 */
function commerce_event_ticket_get_ticket_config($product) {
  return array(
    'type' => 'ticket',
  );
}
