<?php
/**
 * @file
 * PDF generation functions for the Commerce Event Ticket module.
 */

/**
 * Implements hook_entity_presave().
 */
function commerce_event_ticket_pdf_entity_insert($entity, $type) {
  // Generate and save a PDF file when the ticket entity is updated.
  if ($type == 'commerce_event_ticket') {
    commerce_event_ticket_pdf_create($entity);
  }
}

/**
 * Create a PDF file for a ticket.
 *
 * @param CommerceEventTicketEntity $ticket
 *   The ticket object.
 * @param bool $recreate
 *   Whether to recreate (replace) the file if it already exists.
 *
 * @return stdClass|FALSE
 *   A Drupal managed file object, already saved, or FALSE on failure.
 */
function commerce_event_ticket_pdf_create(CommerceEventTicketEntity $ticket, $recreate = FALSE) {
  // Use an Entity API metadata wrapper for simpler access to the file field.
  $ticket_wrapper = entity_metadata_wrapper('commerce_event_ticket', $ticket);
  // If the file already exists then just return that.
  if (!empty($ticket->cet_pdf) && !$recreate) {
    return $ticket_wrapper->cet_pdf->value();
  }
  // Generate a new PDF file (using the TCPDF library).
  $pdf = commerce_event_ticket_pdf_generate($ticket);
  if (!$pdf) {
    watchdog('commerce_event_ticket', 'Could not generate PDF file for ticket @ticket', array('@ticket' => $ticket->ticket_id), WATCHDOG_ERROR);
  }
  // Get the PDF data as a string.
  $pdf_data = $pdf->Output('', 'S');
  // Save the generated PDF file.
  $save_dir = 'private://commerce_event_ticket_pdf';
  if (!file_exists($save_dir)) {
    mkdir($save_dir, 0775, TRUE);
    chmod($save_dir, 0775);
  }
  $destination = sprintf($save_dir . '/ticket_%d.pdf', $ticket->ticket_id);
  $file = file_save_data($pdf_data, $destination, FILE_EXISTS_REPLACE);
  if ($file) {
    // Ensure that the file UID is the same as the order UID.
    // @todo can this commerce_order_load() be done through the wrapper? or is
    // there any way to save the file with the correct UID already set?
    $order = commerce_order_load($ticket->order_id);
    $file->uid = $order->uid;
    file_save($file);
    // Save the file to the ticket.
    $ticket_wrapper->cet_pdf->set(array(
      'fid' => $file->fid,
      'display' => 0,
    ));
    $ticket_wrapper->save();
  }
  return $file;
}

/**
 * Generate a PDF for a ticket.
 *
 * @param CommerceEventTicketEntity $ticket
 *   The ticket object.
 *
 * @return TCPDF|FALSE
 *   A TCPDF object, or FALSE on failure.
 */
function commerce_event_ticket_pdf_generate(CommerceEventTicketEntity $ticket) {
  $pdf = _commerce_event_ticket_pdf_get_tcpdf_instance();
  if (!$pdf) {
    watchdog('commerce_event_ticket', 'Failed to get TCPDF instance', NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  // Turn off the TCPDF header and footer (a black line).
  $pdf->setPrintHeader(FALSE);
  $pdf->setPrintFooter(FALSE);

  // Create a new PDF page.
  $pdf->addPage('P', 'A4');
  // Get the page width for later calculations.
  $page_width = $pdf->getPageWidth();

  // Create a QR code in the centre of the page.
  $pdf->write2DBarcode($ticket->barcode_token, 'QRCODE', ($page_width / 2) - 25, 10, 50, 50);

  // Write some text just under the vertical barcode.
  $product = commerce_product_load($ticket->product_id);
  $pdf->setX(10);
  $pdf->setY(60);
  $pdf->SetFont('Helvetica', NULL, 12);
  $pdf->Write(5, $product->title);

  return $pdf;
}

/**
 * Get a TCPDF instance.
 *
 * @return TCPDF
 *   A TCPDF object.
 */
function _commerce_event_ticket_pdf_get_tcpdf_instance() {
  $config = array(
    'filetype' => 'inc',
    'filename' => 'commerce_event_ticket_pdf.config',
    'module' => 'commerce_event_ticket_pdf',
  );
  return tcpdf_get_instance(array(), array(), $config);
}
